name: Build and Publish DocDuck Images

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
    paths:
      - 'Api/**'
      - 'Indexer/**'
      - 'Providers.Shared/**'
      - 'web/**'
      - 'Dockerfile'
      - 'Api/Dockerfile'
      - 'web/Dockerfile'
      - 'helm/docduck/**'
  pull_request:
    branches: [ main ]
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Manual version override (e.g. v0.2.0)'
        required: false

env:
  REGISTRY: ghcr.io
  IMAGE_ROOT: ${{ github.repository_owner }}/docduck
  DOTNET_VERSION: 8.0.x
  NODE_VERSION: 20.x
  VITE_API_BASE: /api
  PLATFORMS: linux/amd64,linux/arm64

jobs:
  derive-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.setver.outputs.version }}
      version_no_v: ${{ steps.setver.outputs.version_no_v }}
    steps:
      - name: Determine version
        id: setver
        run: |
          if [ "${{ github.event_name }}" = release ]; then
            ver='${{ github.event.release.tag_name }}'
          elif [ -n "${{ github.event.inputs.version }}" ]; then
            ver='${{ github.event.inputs.version }}'
          else
            # Fallback derive from git describe or commit short SHA
            ver="v0.0.0-${GITHUB_SHA::7}"
          fi
          nov=${ver#v}
          echo "version=$ver" >> $GITHUB_OUTPUT
          echo "version_no_v=$nov" >> $GITHUB_OUTPUT
          echo "Using version: $ver"

  build-api:
    runs-on: ubuntu-latest
    needs: derive-version
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build & Push API
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Api/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          platforms: ${{ env.PLATFORMS }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_ROOT }}/api:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_ROOT }}/api:${{ needs.derive-version.outputs.version_no_v }}
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.version=${{ needs.derive-version.outputs.version }}

  build-indexer:
    runs-on: ubuntu-latest
    needs: derive-version
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build & Push Indexer
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          platforms: ${{ env.PLATFORMS }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_ROOT }}/indexer:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_ROOT }}/indexer:${{ needs.derive-version.outputs.version_no_v }}
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.version=${{ needs.derive-version.outputs.version }}

  build-web:
    runs-on: ubuntu-latest
    needs: derive-version
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Inject API base (build arg)
        run: echo "VITE_API_BASE=/api" >> $GITHUB_ENV
      - name: Build & Push Web
        uses: docker/build-push-action@v5
        with:
          context: .
          file: web/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          build-args: |
            VITE_API_BASE=${{ env.VITE_API_BASE }}
          platforms: ${{ env.PLATFORMS }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_ROOT }}/web:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_ROOT }}/web:${{ needs.derive-version.outputs.version_no_v }}
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.version=${{ needs.derive-version.outputs.version }}

  update-helm-chart:
    if: false # disabled (chart released via dedicated workflow)
    runs-on: ubuntu-latest
    steps:
      - run: echo "Chart auto-update disabled. Use chart-release workflow."

  summary:
    runs-on: ubuntu-latest
    needs: [derive-version, build-api, build-indexer, build-web]
    steps:
      - name: Output summary
        run: |
          echo "Built images with version ${{ needs.derive-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "Images:" >> $GITHUB_STEP_SUMMARY
          echo "- ${{ env.REGISTRY }}/${{ env.IMAGE_ROOT }}/api:${{ needs.derive-version.outputs.version_no_v }}" >> $GITHUB_STEP_SUMMARY
          echo "- ${{ env.REGISTRY }}/${{ env.IMAGE_ROOT }}/web:${{ needs.derive-version.outputs.version_no_v }}" >> $GITHUB_STEP_SUMMARY
          echo "- ${{ env.REGISTRY }}/${{ env.IMAGE_ROOT }}/indexer:${{ needs.derive-version.outputs.version_no_v }}" >> $GITHUB_STEP_SUMMARY

